import { Request, Response, NextFunction } from 'express'
import { validationResult, ValidationError, Result } from 'express-validator'

/**
 * Middleware that handles input validation errors from express-validator.
 * 
 * This middleware checks if the request contains any validation errors
 * generated by express-validator validation chains. If errors are found,
 * it responds with a 400 Bad Request status and the array of validation
 * errors. If no errors exist, it passes control to the next middleware.
 * 
 * **Error Response Format:**
 * Each error in the array contains:
 * - `msg`: Error message describing the validation failure
 * - `param`: Name of the field that failed validation
 * - `location`: Where the param was found (body, query, params, etc.)
 * - `value`: The actual value that failed validation
 * 
 * **Usage:**
 * This middleware should be placed after express-validator validation
 * chains and before the actual route handler to catch validation errors
 * early in the request processing pipeline.
 * 
 * @middleware
 * 
 * @param {Request} req - Express request object containing validated data
 * @param {Response} res - Express response object for sending errors
 * @param {NextFunction} next - Express next function to pass control
 * 
 * @returns {void | Response} Either calls next() or returns 400 response with errors
 * 
 * @example
 * // Using in a route with validation chain
 * router.post(
 *   '/api/users/register',
 *   body('email').isEmail().withMessage('Invalid email'),
 *   body('password').isLength({ min: 8 }).withMessage('Password too short'),
 *   handleInputErrors,  // ← This middleware catches validation errors
 *   createAccount       // ← Only executes if no validation errors
 * )
 * 
 * @example
 * // Error response when validation fails
 * // Status: 400 Bad Request
 * {
 *   "errors": [
 *     {
 *       "msg": "Invalid email",
 *       "param": "email",
 *       "location": "body",
 *       "value": "invalid-email"
 *     },
 *     {
 *       "msg": "Password too short",
 *       "param": "password",
 *       "location": "body",
 *       "value": "123"
 *     }
 *   ]
 * }
 * 
 * @example
 * // When no errors exist, next middleware executes
 * // The request continues to the route handler
 */
export const handleInputErrors = (req: Request, res: Response, next: NextFunction): void | Response => {
    const errors: Result<ValidationError> = validationResult(req)

    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() })
    }

    next()
}